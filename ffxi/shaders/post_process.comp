#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform readonly restrict image2D in_colour;
layout(binding = 1, rgba32f) uniform readonly restrict image2D in_normal;
layout(binding = 2, rgba32f) uniform readonly restrict image2D in_motionvector;
layout(binding = 3) uniform usampler2D in_factor;
layout(binding = 4) uniform sampler2D in_image_prev;
layout(binding = 5, r8ui) uniform writeonly restrict uimage2D out_factor;
layout(binding = 6, rgba32f) uniform writeonly restrict image2D out_image;

float denoiseStrength = 3.0f;

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec2 offset[25];
    offset[0] = vec2(-2,-2);
    offset[1] = vec2(-1,-2);
    offset[2] = vec2(0,-2);
    offset[3] = vec2(1,-2);
    offset[4] = vec2(2,-2);
    
    offset[5] = vec2(-2,-1);
    offset[6] = vec2(-1,-1);
    offset[7] = vec2(0,-1);
    offset[8] = vec2(1,-1);
    offset[9] = vec2(2,-1);
    
    offset[10] = vec2(-2,0);
    offset[11] = vec2(-1,0);
    offset[12] = vec2(0,0);
    offset[13] = vec2(1,0);
    offset[14] = vec2(2,0);
    
    offset[15] = vec2(-2,1);
    offset[16] = vec2(-1,1);
    offset[17] = vec2(0,1);
    offset[18] = vec2(1,1);
    offset[19] = vec2(2,1);
    
    offset[20] = vec2(-2,2);
    offset[21] = vec2(-1,2);
    offset[22] = vec2(0,2);
    offset[23] = vec2(1,2);
    offset[24] = vec2(2,2);
    
    
    float kernel[25];
    kernel[0] = 1.0f/256.0f;
    kernel[1] = 1.0f/64.0f;
    kernel[2] = 3.0f/128.0f;
    kernel[3] = 1.0f/64.0f;
    kernel[4] = 1.0f/256.0f;
    
    kernel[5] = 1.0f/64.0f;
    kernel[6] = 1.0f/16.0f;
    kernel[7] = 3.0f/32.0f;
    kernel[8] = 1.0f/16.0f;
    kernel[9] = 1.0f/64.0f;
    
    kernel[10] = 3.0f/128.0f;
    kernel[11] = 3.0f/32.0f;
    kernel[12] = 9.0f/64.0f;
    kernel[13] = 3.0f/32.0f;
    kernel[14] = 3.0f/128.0f;
    
    kernel[15] = 1.0f/64.0f;
    kernel[16] = 1.0f/16.0f;
    kernel[17] = 3.0f/32.0f;
    kernel[18] = 1.0f/16.0f;
    kernel[19] = 1.0f/64.0f;
    
    kernel[20] = 1.0f/256.0f;
    kernel[21] = 1.0f/64.0f;
    kernel[22] = 3.0f/128.0f;
    kernel[23] = 1.0f/64.0f;
    kernel[24] = 1.0f/256.0f;
    
    vec4 mv = imageLoad(in_motionvector, pos);
    vec2 output_dimensions = imageSize(out_image).xy;
    mv.xy *= output_dimensions;
    vec2 texcoord = vec2(gl_GlobalInvocationID.xy);

    //pos+(0.5,0.5) to get the center of the desired pixel
    vec2 hist_pos = pos + vec2(0.5, 0.5) - mv.xy;
    vec4 hist_colour = texture(in_image_prev, hist_pos);

    vec3 sum = vec3(0.0);
    float c_phi = 1.0;
    float n_phi = 0.5;
    float p_phi = 0.3;
    vec4 brdf = imageLoad(in_colour, pos);
    vec3 cval = brdf.rgb;
    vec4 nval = imageLoad(in_normal, pos);
    float pval = brdf.a;
    
    float cum_w = 0.0;
    for(int denoise=1; denoise<denoiseStrength; denoise++)
    {
        for(int i=0; i<25; i++)
        {
            vec2 uv = pos+offset[i]*denoise;
            
            vec4 brdf_tmp = imageLoad(in_colour, ivec2(uv));
            vec3 ctmp = brdf_tmp.rgb;
            vec3 t = cval - ctmp;
            float dist2 = dot(t,t);
            float c_w = min(exp(-(dist2)/c_phi), 1.0);
            
            vec4 ntmp = imageLoad(in_normal, ivec2(uv));
            vec4 t4 = nval - ntmp;
            dist2 = max(dot(t4,t4), 0.0);
            float n_w = min(exp(-(dist2)/n_phi), 1.0);
            
            dist2 = pval - brdf_tmp.a;
            float p_w = min(exp(-(dist2)/p_phi), 1.0);
            
            //float weight = c_w*n_w*p_w;
            float weight = n_w * p_w;
            sum += ctmp*weight*kernel[i];
            cum_w += weight*kernel[i];
        }
    }
    uint factor = min(30, texture(in_factor, hist_pos).r);

    //TODO: this on its own is probably insufficient - also probably want some kind of entity id check? if the history point is on a different entity we can be reasonably sure it's not the same thing
    if (abs(mv.z - hist_colour.w) > 1)
        factor = 0;
    vec3 color = hist_colour.xyz * factor;
    color = (color + (sum / cum_w)) / (factor + 1);
    imageStore(out_factor, pos, uvec4(factor + 1));
    imageStore(out_image, pos, vec4(color, mv.z));
}

