#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common.glsl"

struct Vertex
{
    vec3 pos;
    float _pad;
    vec3 norm;
    float _pad2;
    vec2 uv;
    vec2 _pad3;
};

layout(set = 2, binding = eMeshInfo) buffer readonly MeshInfo
{
    Mesh m[];
} meshInfo;
layout(set = 2, binding = eTextures) uniform sampler2D textures[];

layout(buffer_reference, scalar) buffer Indices { uint16_t i[]; };
layout(buffer_reference, scalar) buffer Vertices { Vertex v[]; };
layout(buffer_reference, scalar) buffer Materials { Material m; };

layout(location = 0) rayPayloadInEXT HitValue
{
    vec3 color;
} hitValue;

hitAttributeEXT vec2 attribs;

void main()
{
    Mesh mesh = meshInfo.m[gl_InstanceCustomIndexEXT+gl_GeometryIndexEXT];

    Indices indices = Indices(mesh.index_buffer);
    uvec3 primitive_indices = uvec3(
        uint(indices.i[gl_PrimitiveID * 3 + 0]),
        uint(indices.i[gl_PrimitiveID * 3 + 1]),
        uint(indices.i[gl_PrimitiveID * 3 + 2])
    );

    Vertices vertices = Vertices(mesh.vertex_buffer);
    Vertex v0 = vertices.v[primitive_indices.x];
    Vertex v1 = vertices.v[primitive_indices.y];
    Vertex v2 = vertices.v[primitive_indices.z];
    const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);

    vec2 uv = v0.uv * barycentrics.x + v1.uv * barycentrics.y + v2.uv * barycentrics.z;
    Materials materials = Materials(mesh.material);
    uint texture_index = materials.m.texture_index;
    float a = texture(textures[nonuniformEXT(texture_index)], uv).a;
    if (a == 0)
        ignoreIntersectionEXT;
}
