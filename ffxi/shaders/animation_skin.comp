#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct VertexWeight
{
    vec3 pos;
    vec3 norm;
    float weight;
    uint bone_index;
    uint mirror_axis;
    vec2 uv;
};

layout(std430, binding = 0) buffer VertexWeights
{
    VertexWeight weights[];
} in_buffer;

struct Bone
{
    vec4 rot;
    vec3 trans;
    vec3 scale;
};

layout(std430, binding = 1) buffer Skeleton
{
    Bone bones[];
} skeleton;

struct Vertex
{
    vec3 pos;
    vec3 norm;
    vec2 uv;
};

layout(std430, binding = 2) buffer VertexBuffer
{
    Vertex vertices[];
} out_buffer;

vec3 mirror_vec(vec3 pos, uint mirror_axis)
{
    vec3 out_pos = pos;
    if (mirror_axis == 1)
        out_pos.x = -out_pos.x;
    if (mirror_axis == 2)
        out_pos.y = -out_pos.y;
    if (mirror_axis == 3)
        out_pos.z = -out_pos.z;
    return out_pos;
}

vec3 rotate_trans(vec4 quat_rot, vec3 pos)
{
    vec3 uv = cross(quat_rot.xyz, pos);
    vec3 uuv = cross(quat_rot.xyz, uv);
    return pos + 2.0 * ((uv * quat_rot.w) + uuv);
}

void main() {
    VertexWeight weight1 = in_buffer.weights[gl_GlobalInvocationID.x*2];
    VertexWeight weight2 = in_buffer.weights[gl_GlobalInvocationID.x*2+1];

    Bone bone1 = skeleton.bones[weight1.bone_index];

    vec3 pos = rotate_trans(bone1.rot, mirror_vec(weight1.pos * bone1.scale, weight1.mirror_axis)) + (bone1.trans * weight1.weight);
    vec3 norm = rotate_trans(bone1.rot, mirror_vec(weight1.norm * bone1.scale, weight1.mirror_axis));

    if (weight2.weight > 0)
    {
        Bone bone2 = skeleton.bones[weight2.bone_index];

        pos += rotate_trans(bone2.rot, mirror_vec(weight2.pos * bone2.scale, weight2.mirror_axis)) + (bone2.trans * weight2.weight);
        norm += rotate_trans(bone2.rot, mirror_vec(weight2.norm * bone2.scale, weight2.mirror_axis));
    }

    norm = normalize(norm);
    out_buffer.vertices[gl_GlobalInvocationID.x].pos = pos;
    out_buffer.vertices[gl_GlobalInvocationID.x].norm = norm;
    out_buffer.vertices[gl_GlobalInvocationID.x].uv = weight1.uv;
}

