#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common.glsl"
#include "sampling.glsl"

layout(binding = eAS, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 0, set = 1) uniform writeonly restrict image2D albedo;
layout(binding = 1, set = 1) uniform writeonly restrict image2D normal;
layout(binding = 2, set = 1) uniform writeonly restrict image2D light;
layout(binding = 3, set = 1) uniform writeonly restrict image2D particle;
layout(binding = 4, set = 1) uniform writeonly restrict image2D motion_vector;
layout(binding = 5, set = 1) uniform Camera
{
    mat4 proj;
    mat4 view;
    mat4 proj_inverse;
    mat4 view_inverse;
    vec4 eye_pos;
} camera[2];

layout(location = 0) rayPayloadEXT HitValue
{
    vec3 BRDF;
    vec3 diffuse;
    vec3 normal;
    int depth;
    uint seed;
    float weight;
    vec3 origin;
    vec3 direction;
    float distance;
    vec3 particle;
    vec3 prev_pos;
} hitValue;

void main()
{
    const vec2 center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = center / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;

    vec4 origin = camera[0].view_inverse * vec4(0, 0, 0, 1);
    vec4 target = camera[0].proj_inverse * vec4(d.x, d.y, 1, 1);
    vec4 dir = camera[0].view_inverse * vec4(normalize(target.xyz), 0);

    hitValue.normal = vec3(1.0);
    hitValue.depth = 0;
    hitValue.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
    hitValue.weight = 0.0;
    hitValue.particle = vec3(0.0);
    hitValue.distance = 0.0;
    hitValue.origin = vec3(0);
    hitValue.prev_pos = vec3(0);

    traceRayEXT(topLevelAS, 0, 0x01 | 0x02 | 0x10 | 0x20, 0, 0, 0, origin.xyz, 0.001, dir.xyz, 1000.0, 0);
    vec3 hit_normal = hitValue.normal;
    vec3 diffuse = hitValue.diffuse;
    vec3 BRDF = hitValue.BRDF;
    vec3 gi_origin = hitValue.origin;
    vec3 pos = hitValue.origin;
    vec3 pos_prev = hitValue.prev_pos;
    vec3 gi_dir = hitValue.direction;
    //initial weight is 1.0 because the initial BRDF was pulled out into a separate buffer
    vec3 gi_weight = vec3(1.0);
    vec3 particle_colour = hitValue.particle;
    float dist = hitValue.distance;
    const int max_samples = 1;
    const int max_depth = 2;
    vec3 accumulation = vec3(0.0);

    if (hitValue.depth < max_depth)
    {
        for (int samples = 0; samples < max_samples; ++samples)
        {
            vec3 weight = gi_weight;
            hitValue.depth = 1;
            hitValue.origin = gi_origin;
            hitValue.direction = gi_dir;
            hitValue.distance = 0.0;
            for(; hitValue.depth < max_depth; hitValue.depth++)
            {
                traceRayEXT(topLevelAS, 0, 0x01 | 0x02 | 0x20, 0, 0, 1, hitValue.origin, 0.001, hitValue.direction, 1000.0, 0);
                vec3 factor = hitValue.BRDF * weight;
                accumulation += hitValue.diffuse * factor;
                weight *= factor;
            }
        }
    }

    vec3 light_total = (accumulation * M_PI / float(max_samples)) + diffuse;

    vec4 pos_proj = camera[0].proj * camera[0].view * vec4(pos, 1.0);
    vec4 prev_pos_proj = camera[1].proj * camera[1].view * vec4(pos_prev, 1.0);

    vec2 curScreenPos = (pos_proj.xy / pos_proj.w) * 0.5 + 0.5;
    vec2 prevScreenPos = (prev_pos_proj.xy / prev_pos_proj.w) * 0.5 + 0.5;

    imageStore(albedo, ivec2(gl_LaunchIDEXT.xy), vec4(BRDF, dist));
    imageStore(normal, ivec2(gl_LaunchIDEXT.xy), vec4(hit_normal, 0.0));
    imageStore(light, ivec2(gl_LaunchIDEXT.xy), vec4(light_total, 1.0));
    imageStore(particle, ivec2(gl_LaunchIDEXT.xy), vec4(particle_colour, 1.0));
    imageStore(motion_vector, ivec2(gl_LaunchIDEXT.xy), vec4(vec2(curScreenPos - prevScreenPos), pos_proj.z, prev_pos_proj.z));
}
