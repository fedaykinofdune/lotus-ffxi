#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "sampling.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 0, set = 1) uniform writeonly restrict image2D albedo;
layout(binding = 1, set = 1) uniform writeonly restrict image2D normal;
layout(binding = 2, set = 1) uniform writeonly restrict image2D light;
layout(binding = 3, set = 1) uniform writeonly restrict image2D particle;
layout(binding = 4, set = 1) uniform Camera
{
    mat4 proj;
    mat4 view;
    mat4 proj_inverse;
    mat4 view_inverse;
} camera;

layout(location = 0) rayPayloadEXT HitValue
{
    vec3 BRDF;
    vec3 diffuse;
    vec3 normal;
    int depth;
    uint seed;
    float weight;
    vec3 origin;
    vec3 direction;
    float distance;
    vec3 particle;
} hitValue;

void main() 
{
    const vec2 center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = center / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;

    vec4 origin = camera.view_inverse * vec4(0, 0, 0, 1);
    vec4 target = camera.proj_inverse * vec4(d.x, d.y, 1, 1);
    vec4 dir = camera.view_inverse * vec4(normalize(target.xyz), 0);

    hitValue.normal = vec3(1.0);
    hitValue.depth = 0;
    hitValue.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
    hitValue.weight = 0.0;
    hitValue.particle = vec3(0.0);

    traceRayEXT(topLevelAS, 0, 0x01 | 0x02 | 0x10, 0, 0, 0, origin.xyz, 0.001, dir.xyz, 1000.0, 0);
    vec3 hit_normal = hitValue.normal;
    vec3 diffuse = hitValue.diffuse;
    vec3 BRDF = hitValue.BRDF;
    vec3 gi_origin = hitValue.origin;
    vec3 gi_dir = hitValue.direction;
    vec3 gi_weight = hitValue.BRDF * hitValue.weight;
    vec3 particle_colour = hitValue.particle;
    float dist = hitValue.distance;
    const int max_samples = 1;
    vec3 accumulation = vec3(0.0);
    for (int samples = 0; samples < max_samples; ++samples)
    {
        vec3 weight = gi_weight;
        hitValue.origin = gi_origin;
        hitValue.direction = gi_dir;
        for(; hitValue.depth < 1; hitValue.depth++)
        {
            traceRayEXT(topLevelAS, 0, 0x01 | 0x02, 0, 0, 1, hitValue.origin, 0.001, hitValue.direction, 1000.0, 0);
            accumulation += hitValue.BRDF * hitValue.diffuse * weight;
            weight *= hitValue.weight * hitValue.BRDF;
        }
    }

    imageStore(albedo, ivec2(gl_LaunchIDEXT.xy), vec4(BRDF, dist));
    imageStore(normal, ivec2(gl_LaunchIDEXT.xy), vec4(hit_normal, 0.0));
    imageStore(light, ivec2(gl_LaunchIDEXT.xy), vec4((accumulation / float(max_samples)) + diffuse, 1.0));
    imageStore(particle, ivec2(gl_LaunchIDEXT.xy), vec4(particle_colour, 1.0));
}
