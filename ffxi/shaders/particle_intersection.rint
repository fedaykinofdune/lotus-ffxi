#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common.glsl"

struct Vertex
{
    vec3 pos;
    float _pad;
    vec3 norm;
    float _pad2;
    vec4 colour;
    vec2 uv;
    vec2 _pad3;
};

layout(set = 2, binding = eMeshInfo) buffer readonly MeshInfo
{
    Mesh m[];
} meshInfo;

layout(buffer_reference, scalar) buffer Indices { uint16_t i[]; };
layout(buffer_reference, scalar) buffer Vertices { Vertex v[]; };

hitAttributeEXT block {
    vec2 bary_coord;
    uint primitive_id;
} attribs;

mat4 lookAt(vec3 eye, vec3 center, vec3 up)
{
    vec3 f = vec3(normalize(center - eye));
    vec3 s = vec3(normalize(cross(f, up)));
    vec3 u = vec3(cross(s, f));

    mat4 Result = mat4(1);
    Result[0][0] = s.x;
    Result[1][0] = s.y;
    Result[2][0] = s.z;
    Result[0][1] = u.x;
    Result[1][1] = u.y;
    Result[2][1] = u.z;
    Result[0][2] =-f.x;
    Result[1][2] =-f.y;
    Result[2][2] =-f.z;
    Result[3][0] =-dot(s, eye);
    Result[3][1] =-dot(u, eye);
    Result[3][2] = dot(f, eye);

    return Result;
}

void main()
{
    Mesh mesh = meshInfo.m[gl_InstanceCustomIndexEXT + gl_GeometryIndexEXT];
    Indices indices = Indices(mesh.index_buffer);
    Vertices vertices = Vertices(mesh.vertex_buffer);

    for (uint i = 0; i < mesh.index_count; i += 3)
    {
        uvec3 triangle_indices = uvec3(
            uint(indices.i[i]),
            uint(indices.i[i + 1]),
            uint(indices.i[i + 2])
        );

        mat4x3 transform = gl_ObjectToWorldEXT;
        /*
        if (mesh_info.billboard > 0)
        {
            mat4 scale = mat4(vec4(mesh_info.scale.x, 0, 0, 0), vec4(0, mesh_info.scale.y, 0, 0), vec4(0, 0, mesh_info.scale.z, 0), vec4(0,0,0,1));
            mat4 pos = mat4(1.0);
            pos[3] = vec4(transform[3], 1.0);
            mat4 rot = mat4(transpose(mat3(lookAt(gl_WorldRayOriginEXT, normalize(gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT), vec3(0, -1.0, 0)))));
            transform = mat4x3(pos * rot * scale);
        }
        */

        vec3 v0 = transform * vec4(vertices.v[triangle_indices.x].pos, 1.0);
        vec3 v1 = transform * vec4(vertices.v[triangle_indices.y].pos, 1.0);
        vec3 v2 = transform * vec4(vertices.v[triangle_indices.z].pos, 1.0);

        vec3 e1 = v1 - v0;
        vec3 e2 = v2 - v0;

        vec3 h = cross(gl_WorldRayDirectionEXT, e2);
        float a = dot(e1, h);

        if (a > -0.00001 && a < 0.00001)
            continue;

        float f = 1/a;
        vec3 s = gl_WorldRayOriginEXT - v0;
        float u = f * dot(s, h);

        if (u < 0.0 || u > 1.0)
            continue;

        vec3 q = cross(s, e1);
        float v = f * dot(gl_WorldRayDirectionEXT, q);

        if (v < 0.0 || u + v > 1.0)
            continue;

        float t = f * dot(e2, q);

        if (t > gl_RayTminEXT && t < gl_RayTmaxEXT)
        {
            attribs.bary_coord = vec2(u, v);
            attribs.primitive_id = i / 3;
            if (reportIntersectionEXT(t, 0u))
                return;
        }
    }
}
