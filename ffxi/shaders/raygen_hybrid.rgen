#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "common.glsl"
#include "sampling.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(binding = 4, set = 0) uniform MaterialInfo
{
    Material m;
} materials[1024];

layout(binding = 5, set = 0) uniform MeshInfo
{
    Mesh m[1024];
} meshInfo;

layout(binding = 0, set = 1, rgba32f) uniform image2D light_out;

struct Lights
{
    vec4 diffuse_color;
    vec4 specular_color;
    vec4 ambient_color;
    vec4 fog_color;
    float max_fog;
    float min_fog;
    float brightness;
    float _pad;
};

layout(std430, binding = 4, set = 1) uniform Light
{
    Lights entity;
    Lights landscape;
    vec3 diffuse_dir;
    float _pad;
    float skybox_altitudes1;
    float skybox_altitudes2;
    float skybox_altitudes3;
    float skybox_altitudes4;
    float skybox_altitudes5;
    float skybox_altitudes6;
    float skybox_altitudes7;
    float skybox_altitudes8;
    vec4 skybox_colors[8];
} light;

layout(binding = 5, set = 1) uniform sampler2D position_in;
layout(binding = 6, set = 1) uniform sampler2D normal_in;
layout(binding = 7, set = 1) uniform sampler2D face_normal_in;
layout(binding = 8, set = 1) uniform sampler2D albedo_in;
layout(binding = 9, set = 1) uniform usampler2D material_index_in;
layout(binding = 10, set = 1) uniform Camera {
    mat4 proj;
    mat4 view;
    mat4 proj_inverse;
    mat4 view_inverse;
    vec3 pos;
} camera;

layout(location = 0) rayPayloadEXT HitValue
{
    vec3 BRDF;
    vec3 diffuse;
    vec3 normal;
    int depth;
    uint seed;
    float weight;
    vec3 origin;
    vec3 direction;
} hitValue;

layout(location = 1) rayPayloadEXT Shadow 
{
    vec4 light;
    vec4 shadow;
} shadow;

void main() 
{
    vec2 uv = vec2(float(gl_LaunchIDEXT.x)/float(gl_LaunchSizeEXT.x - 1), float(gl_LaunchIDEXT.y)/float(gl_LaunchSizeEXT.y - 1));
    vec3 position = texture(position_in, uv).xyz;
    vec3 normal = texture(normal_in, uv).xyz;
    vec3 face_normal = texture(face_normal_in, uv).xyz;
    vec4 albedo = texture(albedo_in, uv);
    uint mesh_index = texture(material_index_in, uv).r;
    uint material_index = meshInfo.m[mesh_index].material_index;

    float dot_product = dot(-light.diffuse_dir, normal);

    vec3 diffuse_color = vec3(0.0);
    float brightness = 0;

    Material material = materials[material_index].m;

    if (material.light_type == 0)
    {
        diffuse_color = light.entity.diffuse_color.rgb;
        brightness = light.entity.brightness;
    }
    else
    {
        diffuse_color = light.landscape.diffuse_color.rgb;
        brightness = light.landscape.brightness;
    }

    shadow.light = vec4(diffuse_color * brightness, 1.0);
    shadow.shadow = vec4(0);
    if (dot_product > 0)
    {
        vec3 origin = position + face_normal * 0.001;
        vec3 orthogonal = cross(-light.diffuse_dir, vec3(1,0,0));
        vec3 dir = normalize((-light.diffuse_dir * 500) + (normalize(orthogonal)));
        traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, 0x01 | 0x02 | 0x10, 1, 0, 2, origin, 0.000, dir, 500, 1);
    }

    vec3 diffuse = vec3(0);

    //TODO: proper formula for randomly sampling lights (the direction is not the same as the GI ray, so it cannot be combined with that term)
    diffuse = vec3(max(dot_product, 0.0)) * shadow.shadow.rgb;

    vec3 tangent, bitangent;
    createCoordinateSystem(normal, tangent, bitangent);

    hitValue.depth = 0;
    hitValue.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
    hitValue.weight = 0.0;

    const int max_samples = 1;
    vec3 BRDF = vec3(albedo / M_PI);
    vec3 accumulation = diffuse;
    for (int samples = 0; samples < max_samples; ++samples)
    {
        //BRDF * M_PI
        vec3 weight = albedo.rgb;
        hitValue.origin = position.xyz;
        hitValue.direction = samplingHemisphere(hitValue.seed, tangent, bitangent, normal, 1.0);
        for(hitValue.depth = 0; hitValue.depth < 1; hitValue.depth++)
        {
            traceRayEXT(topLevelAS, 0, 0x01 | 0x02 | 0x10, 0, 0, 1, hitValue.origin, 0.001, hitValue.direction, 1000.0, 0);
            accumulation += hitValue.BRDF * hitValue.diffuse * weight;
            weight *= hitValue.weight * hitValue.BRDF;
        }
    }

    imageStore(light_out, ivec2(gl_LaunchIDEXT.xy), (vec4(accumulation, 0.0) / float(max_samples)) / M_PI);
}
