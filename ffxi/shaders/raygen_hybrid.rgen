#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(binding = 4, set = 0) uniform MaterialInfo
{
    Material m;
} materials[1024];

layout(binding = 5, set = 0) uniform MeshInfo
{
    Mesh m[1024];
} meshInfo;

layout(binding = 0, set = 1, rgba32f) uniform image2D light_out;

struct Lights
{
    vec4 diffuse_color;
    vec4 specular_color;
    vec4 ambient_color;
    vec4 fog_color;
    float max_fog;
    float min_fog;
    float brightness;
    float _pad;
};

layout(std430, binding = 3, set = 1) uniform Light
{
    Lights entity;
    Lights landscape;
    vec3 diffuse_dir;
    float _pad;
    float skybox_altitudes1;
    float skybox_altitudes2;
    float skybox_altitudes3;
    float skybox_altitudes4;
    float skybox_altitudes5;
    float skybox_altitudes6;
    float skybox_altitudes7;
    float skybox_altitudes8;
    vec4 skybox_colors[8];
} light;

layout(binding = 4, set = 1) uniform sampler2D position_in;
layout(binding = 5, set = 1) uniform sampler2D normal_in;
layout(binding = 6, set = 1) uniform sampler2D face_normal_in;
layout(binding = 7, set = 1) uniform usampler2D material_index_in;

layout(location = 1) rayPayloadEXT Shadow 
{
    vec4 light;
    vec4 shadow;
} shadow;

//TODO: get a real random number from C++
float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main() 
{
    vec2 uv = vec2(float(gl_LaunchIDEXT.x)/float(gl_LaunchSizeEXT.x - 1), float(gl_LaunchIDEXT.y)/float(gl_LaunchSizeEXT.y - 1));
    vec3 position = texture(position_in, uv).xyz;
    vec3 normal = texture(normal_in, uv).xyz;
    vec3 face_normal = texture(face_normal_in, uv).xyz;
    uint mesh_index = texture(material_index_in, uv).r;
    uint material_index = meshInfo.m[mesh_index].material_index;

    float dot_product = dot(-light.diffuse_dir, normal);

    vec3 ambient_color = vec3(0.0);
    vec3 specular_color = vec3(0.0);
    vec3 diffuse_color = vec3(0.0);
    float brightness = 0;

    if (materials[material_index].m.light_type == 0)
    {
        ambient_color = light.entity.ambient_color.rgb;
        specular_color = light.entity.specular_color.rgb;
        diffuse_color = light.entity.diffuse_color.rgb;
        brightness = light.entity.brightness;
    }
    else
    {
        ambient_color = light.landscape.ambient_color.rgb;
        specular_color = light.landscape.specular_color.rgb;
        diffuse_color = light.landscape.diffuse_color.rgb;
        brightness = light.landscape.brightness;
    }

    shadow.light = vec4(diffuse_color * brightness, 1.0);
    shadow.shadow = vec4(0);
    if (dot_product > 0)
    {
        vec3 origin = position + face_normal * 0.001;
        vec3 orthogonal = cross(-light.diffuse_dir, vec3(1,0,0));
        float random = rand(gl_LaunchIDEXT.xy) * 2 - 1.0;
        vec3 dir = normalize((-light.diffuse_dir * 500) + (normalize(orthogonal) * 0 * random));
        traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, 0x01 | 0x02 | 0x10, 1, 0, 1, origin, 0.000, dir, 500, 1);
    }

    vec3 ambient = ambient_color;
    vec3 diffuse = vec3(0);

    diffuse = vec3(max(dot_product, 0.0)) * shadow.shadow.rgb;

    vec3 color = ambient + diffuse;

    imageStore(light_out, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
